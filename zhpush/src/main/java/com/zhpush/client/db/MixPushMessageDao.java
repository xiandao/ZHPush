package com.zhpush.client.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhpush.client.pojo.MixPushMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MIX_PUSH_MESSAGE".
*/
public class MixPushMessageDao extends AbstractDao<MixPushMessage, Long> {

    public static final String TABLENAME = "MIX_PUSH_MESSAGE";

    /**
     * Properties of entity MixPushMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property Platform = new Property(2, String.class, "platform", false, "PLATFORM");
        public final static Property Notify = new Property(3, int.class, "notify", false, "NOTIFY");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
    }


    public MixPushMessageDao(DaoConfig config) {
        super(config);
    }
    
    public MixPushMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MIX_PUSH_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageId
                "\"PLATFORM\" TEXT," + // 2: platform
                "\"NOTIFY\" INTEGER NOT NULL ," + // 3: notify
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 4: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MIX_PUSH_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MixPushMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(3, platform);
        }
        stmt.bindLong(4, entity.getNotify());
        stmt.bindLong(5, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MixPushMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(2, messageId);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(3, platform);
        }
        stmt.bindLong(4, entity.getNotify());
        stmt.bindLong(5, entity.getCreateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MixPushMessage readEntity(Cursor cursor, int offset) {
        MixPushMessage entity = new MixPushMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // platform
            cursor.getInt(offset + 3), // notify
            cursor.getLong(offset + 4) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MixPushMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlatform(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNotify(cursor.getInt(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MixPushMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MixPushMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MixPushMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
